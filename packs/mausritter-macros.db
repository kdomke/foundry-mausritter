{"name":"Roll Weather","entity":"script","author":"q3MrHZu1cOoXxlLX","img":"systems/mausritter/images/icons/Macro%20Icons/sun-cloud.png","scope":"global","command":"//Generate Weather\n\n/*\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Sistemas%20Diversos/Mausritter-Weather.js\n*/\n\nconst version = '1.1';\nconst compendium_label = 'Tables';\n\n(async () => {\n\n    // const summer = await drawFromTable('Weather Summer');\n    // const autumn = await drawFromTable('Weather Autumn');\n    // const winter = await drawFromTable('Weather Winter');\n    // const spring = await drawFromTable('Weather Spring');\n    \n    let seasonList = ['Summer', 'Autumn', 'Winter', 'Spring'];\n    let selectList = \"\";\n\n    seasonList.forEach(option => selectList += \"<option value='\" + option + \"'>\" + option + \"</option>\")\n\n    let d = new Dialog({\n        title: \"Select Season\",\n        content: \"<h2> Season </h2> <select style='margin-bottom:10px;'name='stat' id='stat'> \" + selectList + \"</select> <br/>\",\n        buttons: {\n            roll: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"Roll\",\n                callback: (html) => drawFromTable('Weather '+html.find('[id=\\\"stat\\\"]')[0].value)\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n                callback: () => { }\n            }\n        },\n        default: \"roll\",\n        close: () => { }\n    });\n    d.render(true);\n\n})()\n\n/* Functions */\nasync function drawFromTable(tableName) {\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label==compendium_label)[0].getDocuments();      \n  let table = await inside.filter( p=>p.data['name']==tableName )[0];\n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  \n  let weather = await table.roll(); \n  weather = weather.results[0].data.text;  \n  let message = \"<h2> Today's Weather: </h2><b style='font-size:120%;'>\"+weather+\"</br>\";\n  \n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n\n  ChatMessage.create(chatData);  \n}","folder":null,"sort":0,"permission":{"default":0,"q3MrHZu1cOoXxlLX":3},"flags":{"core":{"sourceId":"Macro.VPnVozGT7zmi64xz"}},"_id":"EjAi7W1jOj8v6zws"}
{"name":"Generate Hex","entity":"script","author":"q3MrHZu1cOoXxlLX","img":"systems/mausritter/images/icons/Macro%20Icons/honeycomb.png","scope":"global","command":"//Generate Hex\n\n/*\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Sistemas%20Diversos/Mausritter-Hex.js\n*/\n\nconst version = '1.0';\nconst compendium_label = 'Tables';\n\n(async () => {\n\n    let hexentityList = ['Random', 'Countryside', 'Forest', 'River', 'Human Town'];\n    let selectList = \"\";\n\n    hexentityList.forEach(option => selectList += \"<option value='\" + option + \"'>\" + option + \"</option>\")\n\n    let d = new Dialog({\n        title: \"Select entity\",\n        content: \"<h2> Select or Roll Hex entity </h2> <select style='margin-bottom:10px;'name='stat' id='stat'> \" + selectList + \"</select> <br/>\",\n        buttons: {\n            roll: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"Roll\",\n                callback: (html) => hexentity(html.find('[id=\\\"stat\\\"]')[0].value)\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n                callback: () => { }\n            }\n        },\n        default: \"roll\",\n        close: () => { }\n    });\n    d.render(true);\n\n})()\n\nasync function hexentity(hexentity) {\n  let hexContents = \"\";\n  let hexDetails = \"\";\n  let buffer ='';\n  let randomHex = ['Countryside', 'Forest', 'River', 'Human Town'];\n  \n  if(hexentity == \"Random\"){\n    const randomElement = \n    hexentity = randomHex[Math.floor(Math.random() * randomHex.length)];\n  }\n\n  buffer = await drawFromTable(\"Hex - \" + hexentity);\n  buffer = await buffer.roll(); \n  hexContents = buffer.results[0].data.text;\n\n  buffer = await drawFromTable(\"Hex - Landmark Details\");\n  buffer = await buffer.roll(); \n  hexDetails = buffer.results[0].data.text;\n\n\n  let message = \"\\\n  <h2> \"+hexentity+\": </h2>\\\n  <b> Landmark: </b>\"+hexContents+\"</br>\\\n  <b> Details: </b><i>\"+hexDetails+\"</i></br>\";\n\n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n\n  ChatMessage.create(chatData);\n\n}\n\n/* Functions */\nasync function drawFromTable(tableName) {\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label==compendium_label )[0].getDocuments();      \n  let table = await inside.filter( p=>p.data['name']==tableName )[0];\n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  return await table;\n}","folder":null,"sort":0,"permission":{"default":0,"q3MrHZu1cOoXxlLX":3},"flags":{"core":{"sourceId":"Macro.4mkVc1l1zfsIgQgj"}},"_id":"GUSg73Vtn1Pck49h"}
{"name":"NPC Generator","entity":"script","author":"q3MrHZu1cOoXxlLX","img":"systems/mausritter/images/icons/Macro%20Icons/book-cover.png","scope":"global","command":"/* Instant NPC - v0.3\n\nSource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Sistemas%20Diversos/Mausritter-InstantNPC.js\nIcon: systems/mausritter/images/sample/Portrait_Rat.png\n*/\n//test stuff: console.log(canvas.tokens.controlled[0].actor);\n\nconst compendium_label = 'Tables';\n\n(async () => {\n  const Appearance = await drawFromTable('Non-player mice - Appearance');\n  const Birthsign = await drawFromTable('Non-player mice - Birthsign and Disposition');\n  const Quirk = await drawFromTable('Non-player mice - Quirk');\n  const Social = await drawFromTable('Non-player mice - Social position and Payment for service');\n  const Wants = await drawFromTable('Non-player mice - Wants');\n  const Relationship = await drawFromTable('Non-player mice - Relationship');\n  \n  const Birthname = await drawFromTable('Mousy Names - Birthname');  \n  const Matriname = await drawFromTable('Mousy Names - Matriname');\n  \n  const dexterity = attrRoll();\n  const strength = attrRoll();\n  const will = attrRoll();\n  const health = healthRoll();\n  \n  let msg = '';\n  msg += `<p><b>Social position and Payment for service:</b> ${Social}</p>`;  \n  msg += `<p><b>Appearance:</b> ${Appearance}</p>`;  \n  msg += `<p><b>Quirk:</b> ${Quirk}</p>`;  \n  msg += `<p><b>Wants:</b> ${Wants}</p>`;  \n  msg += `<p><b>Relationship:</b> ${Relationship}</p>`;  \n  \n  //let npchp = randomHP(4,10);\n  let instantNPC = await Actor.create({\n    name: Birthname + \" \" + Matriname,\n    entity: \"hireling\",\n    data: {\n      description: {\n        disposition: Birthsign\n      },   \n      notes: msg,\n      stats: {\n        dexterity: {          \n          max: dexterity,\n          value: dexterity\n        },\n        strength: {          \n          max: strength,\n          value: strength\n        },\n        will: {          \n          max: will,\n          value: will\n        }        \n      },\n      health: {\n        max: health,\n        value: health\n      }        \n    }\n  });\n\n  await instantNPC.sheet.render(true);\n  \n})()\n\n/* Functions */\nasync function drawFromTable(tableName) {\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label==compendium_label)[0].getDocuments();      \n  let table = await inside.filter( p=>p.data['name']==tableName )[0];\n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  \n  let buffer = await table.roll(); \n \n  return buffer.results[0].data.text;  \n}\n\nfunction treasureCoins(min, max) {\n  return Math.floor(Math.random() * (max - min) ) + min;  \n}\n\nfunction attrRoll() {\n  return new Roll('2d6').roll({ async : false }).total;\n}\n\nfunction healthRoll() {\n  return new Roll('1d6').roll({ async : false }).total;\n}\n\nfunction randomHP(min, max) {\n  return Math.floor(Math.random() * (max - min) ) + min;  \n}","folder":null,"sort":0,"permission":{"default":0,"q3MrHZu1cOoXxlLX":3},"flags":{"core":{"sourceId":"Macro.5upTlJUaoAsTvdMN"}},"_id":"LKs8P76vMJzk1Zx0"}
{"name":"Roll Stat","permission":{"default":0,"GUOC66HwYtlbK6ox":3},"entity":"script","flags":{"core":{"sourceId":"Macro.d3LcjEb8RJKths4H"}},"scope":"global","command":"game.mausritter.rollStatMacro();","author":"GUOC66HwYtlbK6ox","img":"systems/mausritter/images/icons/Macro%20Icons/rolling-dices.png","actorIds":[],"_id":"MedvXgVpsy2iYgEs"}
